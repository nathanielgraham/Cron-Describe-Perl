[
  {
    "expression": "0 0 0 * * ? *",
    "test_name": "Valid cron with all wildcards",
    "is_valid": true,
    "matches": [
      { "timestamp": 1767139200, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1767142800, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 15 10 * * ? *",
    "test_name": "Valid cron with specific time",
    "is_valid": true
  },
  {
    "expression": "0 0 0 1-5,10-15/2 * ? *",
    "test_name": "Valid cron with day-of-month list and step",
    "is_valid": true,
    "utc_offset": -300,
    "matches": [
      { "timestamp": 1762750800, "utc_offset": -300, "matches": 1 },
      { "timestamp": 1762896000, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 0 0 1 * ? *",
    "test_name": "Valid cron with first day of month",
    "is_valid": true,
    "matches": [
      { "timestamp": 1767225600, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1767312000, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 0 0 L,1 * ? *",
    "test_name": "Invalid L in day-of-month list",
    "is_valid": false,
    "error_message": "Invalid use of 'L' in list for day-of-month"
  },
  {
    "expression": "0 0 0 L-5 * ? *",
    "test_name": "Valid third-to-last day Quartz pattern",
    "is_valid": true
  },
  {
    "expression": "0 0 0 1W,2W * ? *",
    "test_name": "Invalid W in day-of-month list",
    "is_valid": false,
    "error_message": "Invalid use of 'W' in list for day-of-month"
  },
  {
    "expression": "0 0 0 1W-5W * ? *",
    "test_name": "Invalid W in day-of-month range",
    "is_valid": false,
    "error_message": "Invalid use of 'W' in range for day-of-month"
  },
  {
    "expression": "0 0 0 ? * 1W *",
    "test_name": "Invalid W in day-of-week",
    "is_valid": false,
    "error_message": "Invalid use of 'W' in day-of-week field"
  },
  {
    "expression": "0 0 0 * JANUARY-MARCH ? *",
    "test_name": "Valid full month names range",
    "is_valid": true
  },
  {
    "expression": "0 0 0 ? * SUNDAY,TUESDAY,FRIDAY *",
    "test_name": "Valid full day-of-week names in list",
    "is_valid": true
  },
  {
    "expression": "0 0 0 ? * 1#5 *",
    "test_name": "Valid fifth occurrence in day-of-week",
    "is_valid": true
  },
  {
    "expression": "0 0 0 29 2 ? 2024",
    "test_name": "Valid leap year day",
    "is_valid": true
  },
  {
    "expression": "0 0 0 29 2 ? 2025",
    "test_name": "Invalid non-leap year day",
    "is_valid": false,
    "error_message": "Day 29 is invalid for February (month 2)"
  },
  {
    "expression": "0 0 3 15 3 ? 2025",
    "test_name": "DST transition spring forward",
    "is_valid": true,
    "matches": [
      { "timestamp": 1742022000, "utc_offset": -240, "matches": 1 }
    ]
  },
  {
    "expression": "0 0 1 2 11 ? 2025",
    "test_name": "DST transition fall back",
    "is_valid": true,
    "matches": [
      { "timestamp": 1762059600, "utc_offset": -240, "matches": 1 },
      { "timestamp": 1762063200, "utc_offset": -300, "matches": 1 }
    ]
  },
  {
    "expression": "0 0 0 L * ? *",
    "test_name": "Validating last day of month Quartz pattern",
    "is_valid": true
  },
  {
    "expression": "0 0 0 ? * 1#3 *",
    "test_name": "Validating third Sunday Quartz pattern",
    "is_valid": true
  },
  {
    "expression": "0 0 0 15W * ? *",
    "test_name": "Validating nearest weekday to 15th Quartz pattern",
    "is_valid": true
  },
  {
    "expression": "0 0 0 L-3 * ? *",
    "test_name": "Validating third-to-last day Quartz pattern",
    "is_valid": true
  },
  {
    "expression": "0 0 0 ? * 1#6 *",
    "test_name": "Invalid sixth Sunday Quartz pattern",
    "is_valid": false,
    "error_message": "Nth value 6 out of range (1-5)"
  },
  {
    "expression": "0 60 0 * * ? *",
    "test_name": "Invalid minute value",
    "is_valid": false,
    "error_message": "Invalid value '60' for minute, expected 0-59"
  },
  {
    "expression": "0 0 0 31 2 ? *",
    "test_name": "Invalid day for February",
    "is_valid": false,
    "error_message": "Day 31 is invalid for February (month 2)"
  },
  {
    "expression": "0 0 0 LW * 1 *",
    "test_name": "Invalid combination of day-of-month and day-of-week",
    "is_valid": false,
    "error_message": "Cannot specify both day-of-month and day-of-week; one must be '?'"
  },
  {
    "expression": "0 0 0 * * ?W *",
    "test_name": "Invalid day-of-week pattern",
    "is_valid": false,
    "error_message": "Invalid use of 'W' in day-of-week field"
  },
  {
    "expression": "0 0 0 32W * ? *",
    "test_name": "Invalid out-of-range nearest weekday",
    "is_valid": false,
    "error_message": "Day 32 is out of range for nearest weekday (1-31)"
  },
  {
    "expression": "0 0 0 * * 8#3 *",
    "test_name": "Invalid day-of-week number",
    "is_valid": false,
    "error_message": "Day 8 out of range for dow"
  },
  {
    "expression": "0 0 0 * * W#3 *",
    "test_name": "Invalid day-of-week pattern",
    "is_valid": false,
    "error_message": "Invalid use of 'W' in day-of-week field"
  },
  {
    "expression": "0 0 0 15 * 1 *",
    "test_name": "Invalid combination of day-of-month and day-of-week",
    "is_valid": false,
    "error_message": "Cannot specify both day-of-month and day-of-week; one must be '?'"
  },
  {
    "expression": "0 0 0 * * ? 1969",
    "test_name": "Invalid year value",
    "is_valid": false,
    "error_message": "Invalid value '1969' for year, expected 1970-2199"
  },
  {
    "expression": "0 0 0 1,15,31 * ? *",
    "test_name": "Valid day-of-month list",
    "is_valid": true
  },
  {
    "expression": "0 0 0 32 * ? *",
    "test_name": "Invalid day-of-month value",
    "is_valid": false,
    "error_message": "Invalid value '32' for dom, expected 1-31"
  },
  {
    "expression": "0 0 0 0/0 * ? *",
    "test_name": "Invalid step value",
    "is_valid": false,
    "error_message": "Step value 0 is invalid for dom"
  },
  {
    "expression": "0 0 0 * 13 ? *",
    "test_name": "Invalid month value",
    "is_valid": false,
    "error_message": "Invalid value '13' for month, expected 1-12"
  },
  {
    "expression": "",
    "test_name": "Empty cron expression",
    "is_valid": false,
    "error_message": "Empty cron expression is invalid"
  },
  {
    "expression": "0 0 0 * *",
    "test_name": "Invalid cron with missing fields",
    "is_valid": false,
    "error_message": "Invalid cron expression: expected 6 or 7 fields, got 5"
  },
  {
    "expression": "0 0 0 ? * MON-FRI *",
    "test_name": "Valid day-of-week range",
    "is_valid": true
  },
  {
    "expression": "0 0 0 1-5 * ? *",
    "test_name": "Valid day-of-month range",
    "is_valid": true
  },
  {
    "expression": "0 0 0 * * 1-5 *",
    "test_name": "Invalid day-of-week numeric range",
    "is_valid": false,
    "error_message": "Cannot specify both day-of-month and day-of-week; one must be '?'"
  },
  {
    "expression": "0 0 0 * * ?/2 *",
    "test_name": "Invalid step in day-of-week",
    "is_valid": false,
    "error_message": "Invalid pattern '?/2' for dow"
  },
  {
    "expression": "0 0 0 ? * 2#2 *",
    "test_name": "Valid second Monday Quartz pattern",
    "is_valid": true
  },
  {
    "expression": "0 0 0 1,15 * ? *",
    "test_name": "Valid day-of-month list",
    "is_valid": true
  },
  {
    "expression": "0 0 0 L-10 * ? *",
    "test_name": "Valid tenth-to-last day Quartz pattern",
    "is_valid": true
  },
  {
    "expression": "0 30 * * * ? *",
    "test_name": "Valid cron for hourly job at 30 minutes",
    "is_valid": true,
    "matches": [
      { "timestamp": 1767227400, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1767228300, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 0 0 * * ? *",
    "test_name": "Valid cron for daily midnight job in IST",
    "is_valid": true,
    "matches": [
      { "timestamp": 1767205800, "utc_offset": 330, "matches": 1 },
      { "timestamp": 1767229200, "utc_offset": 330, "matches": 0 }
    ]
  },
  {
    "expression": "0 0 0 LW * ? *",
    "test_name": "Valid cron for last weekday of the month",
    "is_valid": true,
    "matches": [
      { "timestamp": 1764288000, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1764105600, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0/15 0 9 * * ? *",
    "test_name": "Valid cron for every 15 seconds in 9 AM hour",
    "is_valid": true,
    "matches": [
      { "timestamp": 1767258015, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1767297620, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 0 0 ? 2 1#4 2024",
    "test_name": "Valid cron for fourth Sunday in February 2024",
    "is_valid": true,
    "matches": [
      { "timestamp": 1708819200, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1708905600, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0/0 0 0 * * ? *",
    "test_name": "Invalid cron with zero step in seconds",
    "is_valid": false,
    "error_message": "Step value 0 is invalid for seconds"
  },
  {
    "expression": "0 0 0/2 2 11 ? 2025",
    "test_name": "Valid cron for every 2 hours on DST fall back",
    "is_valid": true,
    "matches": [
      { "timestamp": 1762056000, "utc_offset": -240, "matches": 1 },
      { "timestamp": 1762066800, "utc_offset": -300, "matches": 1 },
      { "timestamp": 1762059600, "utc_offset": -240, "matches": 0 }
    ]
  },
  {
    "expression": "0 0/5 12 * * ? *",
    "test_name": "Valid cron for every 5 minutes in 12 PM hour",
    "is_valid": true,
    "matches": [
      { "timestamp": 1767269100, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1767266820, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 0 2/4 * * ? *",
    "test_name": "Valid cron for every 4 hours starting at 2 AM",
    "is_valid": true,
    "matches": [
      { "timestamp": 1767261600, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1767265200, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 0 5/3 * * ? *",
    "test_name": "Valid cron for every 3 hours starting at 5 AM",
    "is_valid": true,
    "matches": [
      { "timestamp": 1767265200, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1767268800, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 10-20/5 8 * * ? *",
    "test_name": "Valid cron for every 5 minutes from 10 to 20 past 8 AM",
    "is_valid": true,
    "matches": [
      { "timestamp": 1767255300, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1767255600, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1767255660, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0/10,30,45 0 10 * * ? *",
    "test_name": "Valid cron for seconds 0/10,30,45 at 10 AM",
    "is_valid": true,
    "matches": [
      { "timestamp": 1760436000, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1760436010, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1760436030, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1767264015, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 0/5,15,30 14 * * ? *",
    "test_name": "Valid cron for minutes 0/5,15,30 at 2 PM",
    "is_valid": true,
    "matches": [
      { "timestamp": 1760450400, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1760450700, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1760451300, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1767264015, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 0 * * 0",
    "test_name": "Valid cron: 0 0 * * 0",
    "tz": "America/New_York",
    "is_valid": true
  },
  {
    "expression": "0 0 0 * * ? *",
    "test_name": "Valid cron: 0 0 0 * * ? *",
    "tz": "Asia/Tokyo",
    "is_valid": true
  },
  {
    "expression": "0 0 * * 1",
    "test_name": "Unix: Every day Monday (DOW mapping)",
    "is_valid": true,
    "matches": [
      { "timestamp": 1703462400, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1703548800, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 0 15 * *",
    "test_name": "Unix: 15th of month (DOM case)",
    "is_valid": true,
    "matches": [
      { "timestamp": 1702598400, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1702684800, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "* * * * *",
    "test_name": "Unix: Every minute (every day special case)",
    "is_valid": true
  },
  {
    "expression": "0 0 15 * 1",
    "test_name": "Unix: 15th AND Monday (conflict)",
    "is_valid": false,
    "error_message": "Unix cron cannot specify both day-of-month and day-of-week"
  },
  {
    "expression": "30 * * * *",
    "test_name": "Unix: 30 minutes past hour",
    "is_valid": true,
    "matches": [
      { "timestamp": 1703471400, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1703472000, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "* * 1-5 * *",
    "test_name": "Unix: Days 1-5 of month (range)",
    "is_valid": true,
    "matches": [
      { "timestamp": 1701388800, "utc_offset": 0, "matches": 1 },
      { "timestamp": 1701820800, "utc_offset": 0, "matches": 0 }
    ]
  },
  {
    "expression": "0 0 * * 1",
    "expected_english": "every Monday at midnight"
  },
  {
    "expression": "30 * * * *",
    "expected_english": "every 30 minutes"
  },
  {
    "expression": "0 0 15 * *",
    "expected_english": "on the 15th of the month at midnight"
  },
  {
    "expression": "* * * * *",
    "expected_english": "every minute"
  },
  {
    "expression": "0 * * * *",
    "expected_english": "every hour"
  },
  {
    "expression": "0 0 * * *",
    "expected_english": "every day at midnight"
  },
  {
    "expression": "*/15 * * * *",
    "expected_english": "every 15 minutes"
  },
  {
    "expression": "0 0 1,15 * *",
    "expected_english": "on the first through 15th days of the month at midnight"
  },
  {
    "expression": "0 0 1-5 * *",
    "expected_english": "on first through fifth of the month at midnight"
  },
  {
    "expression": "0 0 * * 1,3,5",
    "expected_english": "on Monday, Wednesday and Friday at midnight"
  },
  {
    "expression": "0 0 * * 1-5",
    "expected_english": "on Sunday through Thursday at midnight"
  },
  {
    "expression": "0 10-20/5 8 * * ? *",
    "expected_english": "every 5 minutes from 10 to 20 past 8 AM"
  },
  {
    "expression": "0 0 1 * * ?",
    "expected_english": "on the 1st of every month at midnight"
  },
  {
    "expression": "0 0 * * MON",
    "expected_english": "every Monday at midnight"
  },
  {
    "expression": "0 0 0 L * ?",
    "expected_english": "last day of every month at midnight"
  },
  {
    "expression": "0 0 1-5/2 8-18/3 * ? *",
    "expected_english": "every 2nd day from 1-5, every 3rd hour from 8-18 at midnight"
  },
  {"expression": "0 0 0 LW * ?", "expected_english": "last weekday of every month at midnight"},
  {"expression": "0 0 0 ? * 1#3", "expected_english": "third Monday of every month at midnight"},
  {"expression": "0 0 0 * * ? 2025", "expected_english": "every day in 2025 at midnight"},
  {"expression": "*/5 * * ? * *", "expected_english": "every 5 seconds"},
  {"expression": "30 45 14 LW * ?", "expected_english": "last weekday of every month at 2:45:30 PM"},
  {"expression": "15 30 9 ? * 1#1", "expected_english": "first Monday of every month at 9:30:15 AM"},
  {"expression": "0 15 6 ? * 1#2", "expected_english": "second Monday of every month at 6:15:00 AM"},
  {"expression": "45 0 16 ? * 1#3", "expected_english": "third Monday of every month at 4:00:45 PM"},
  {"expression": "20 45 11 ? * 1#4", "expected_english": "fourth Monday of every month at 11:45:20 AM"},
  {"expression": "10 20 7 ? * 1#5", "expected_english": "fifth Monday of every month at 7:20:10 AM"},
  {"expression": "25 50 3 * * ? 2024", "expected_english": "every day in 2024 at 3:50:25 AM"},
  {"expression": "5 25 19 * * ? 2025", "expected_english": "every day in 2025 at 7:25:05 PM"},
  {"expression": "40 10 22 * * ? 2024-2025", "expected_english": "every day from 2024-2025 at 10:10:40 PM"},
  {"expression": "*/15 * * ? * *", "expected_english": "every 15 seconds"},
  {"expression": "0 */15 * ? * *", "expected_english": "every 15 minutes"},
  {"expression": "0 0 */3 ? * *", "expected_english": "every 3 hours"},
  {"expression": "30 0 10 1-5/2 * ?", "expected_english": "every 2nd day from 1st-5th of every month at 10:00:30 AM"},
  {"expression": "15 30 13 ? 1-6/2 *", "expected_english": "every 2nd month from January-June at 1:30:15 PM"},
  {"expression": "25 45 8 ? * 1-5/2", "expected_english": "every 2nd weekday at 8:45:25 AM"},
  {"expression": "10 20 0 * * ? */2", "expected_english": "every even year at 12:20:10 AM"},
  {"expression": "0 0 0 L-5 * ? *", "expected_english": "every even year at 12:20:10 AM"}

]
